// Copyright (C) 1997-2006 Autodesk, Inc., and/or its licensors.// All rights reserved.//// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.//// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//****************************************************************************
// Contains Maya node classificaation strings for known mental ray shaders.
//****************************************************************************

source "mentalCustomNodeClass.mel";

global proc string mentalrayCustomNodeClass(string $nodeType)
{
	assignViewportFactories -materialFactory "MentalRayMaterial" 
							-textureFactory "MentalRayTexture" 
							-nodeType $nodeType;

	// Materials, Material surface shaders.
	// Provides additional functionalities on top of
	// Material shaders(rendernode/mentalray/material).
	// "Assign New Material", "Assign Existing Material" RMB,
	// Created with a SG.
	// RMB on the node.

	if ($nodeType == "mib_illum_lambert" ||
	    $nodeType == "mib_illum_phong" ||
	    $nodeType == "mib_illum_blinn" ||
	    $nodeType == "mib_illum_cooktorr" ||
	    $nodeType == "mib_illum_ward" ||
	    $nodeType == "mib_illum_ward_deriv" ||
	    $nodeType == "mib_illum_hair" ||
	    $nodeType == "dgs_material" ||
	    $nodeType == "dielectric_material" ||
	    $nodeType == "path_material" ||
	    $nodeType == "mi_car_paint_phen" ||
	    $nodeType == "mi_metallic_paint" ||
	    $nodeType == "misss_call_shader" ||
	    $nodeType == "misss_fast_shader" ||
	    $nodeType == "misss_fast_simple_maya" ||
	    $nodeType == "misss_fast_skin_maya" ||	    
	    $nodeType == "misss_physical" ||
	    $nodeType == "misss_skin_specular" ||
	    $nodeType == "transmat" )

		return "rendernode/mentalray/material:shader/surface:swatch/mentalRaySwatchGen";
	
	// texture shaders supported by swatch
	if( $nodeType == "mib_texture_checkerboard" ||
		$nodeType == "mib_texture_polkadot" ||
		$nodeType == "mib_texture_polkasphere" ||
		$nodeType == "mib_texture_turbulence" ||
		$nodeType == "mib_amb_occlusion" ||
		$nodeType == "mib_texture_wave" )
		return "rendernode/mentalray/texture:swatch/mentalRaySwatchGen";

	// Contour
	// Contour store functions

	if ($nodeType == "contour_store_function" ||
	    $nodeType == "contour_store_function_simple" )
		return "rendernode/mentalray/contour/store";

	// Contour contrast functions

	if ($nodeType == "contour_contrast_function_levels" ||
	    $nodeType == "contour_contrast_function_simple" )
		return "rendernode/mentalray/contour/contrast";

	// Contour shaders

	if ($nodeType == "contour_shader_simple" ||
	    $nodeType == "contour_shader_randomwidth" ||
	    $nodeType == "contour_shader_randomtransparency" ||
	    $nodeType == "contour_shader_curvature" ||
	    $nodeType == "contour_shader_factorcolor" ||
	    $nodeType == "contour_shader_depthfade" ||
	    $nodeType == "contour_shader_framefade" ||
	    $nodeType == "contour_shader_layerthinner" ||
	    $nodeType == "contour_shader_widthfromcolor" ||
	    $nodeType == "contour_shader_widthfromlightdir" ||
	    $nodeType == "contour_shader_widthfromlight" ||
	    $nodeType == "contour_shader_combi" )

		return "rendernode/mentalray/contour/shader";

	// Contour output shaders

	if ($nodeType == "contour_only" ||
	    $nodeType == "contour_composite" ||
	    $nodeType == "contour_ps" )

		return "rendernode/mentalray/contour/output";

	// Sample Compositing

	if ($nodeType == "mib_reflect" ||
	    $nodeType == "mib_refract" ||
	    $nodeType == "mib_transparency" ||
	    $nodeType == "mib_opacity" ||
	    $nodeType == "mib_dielectric" ||
	    $nodeType == "mib_twosided" ||
	    $nodeType == "mib_refraction_index" ||
	    $nodeType == "mib_continue" )

		return "rendernode/mentalray/composite:swatch/mentalRaySwatchGen";

	// Data Conversion

	if ($nodeType == "mib_color_alpha" ||
	    $nodeType == "mib_color_average" ||
	    $nodeType == "mib_color_intensity" ||
	    $nodeType == "mib_color_interpolate" ||
	    $nodeType == "mib_color_mix" ||
	    $nodeType == "mib_color_spread" )

		return "rendernode/mentalray/conversion:swatch/mentalRaySwatchGen";

	// Internal MentalRay Nodes. Not meant to be used with Maya.

	if ($nodeType == "misss_physical_phen"  ||
		$nodeType == "surfaceSampler" )

		return "rendernode/mentalray/internal";

	return mentalCustomNodeClass($nodeType);
}

