// Copyright (C) 1997-2004 Alias Systems Corp.
// 
// The information in this file is provided for the exclusive use of the
// licensees of Alias.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias license agreement, without fee.
// 
// ALIAS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

//****************************************************************************
//	Maintains the mental ray instance flags on Maya instance nodes.
//****************************************************************************

global proc AEmrInstanceFlagsCreate(string $messagePlug)
{
	warning("Calling an obsolete mel procedure AEmrInstanceFlagsCreate.");
}

global proc AEmrInstanceFlagsFlagsUpdate(string $node, int $flag)
{
	warning("Calling an obsolete mel procedure AEmrInstanceFlagsFlagsUpdate.");
}

global proc AEmrInstanceFlagsFlagsNew(string $messagePlug)
{
	warning("Calling an obsolete mel procedure AEmrInstanceFlagsFlagsNew.");
}

global proc AEmrInstanceFlagsFlagsReplace(string $messagePlug)
{
	warning("Calling an obsolete mel procedure AEmrInstanceFlagsFlagsReplace.");
}
// ===========================================================================

proc mrl_add_instance_flags( string $node )
{
   string $children[] = `listRelatives -s -f -ni $node`;
   int $valid = 0;
   for ( $child in $children )
   {
      string $type = `objectType $child`;
      if ( $type == "mesh" ||
	   $type == "nurbsSurface" ||
	   $type == "subdiv" ||
	   $type == "mentalFileObjectShape" ||
	   $type == "renderBox" ||
	   $type == "renderSphere" ||
	   $type == "stroke" ||
$type == "pfxHair" )
      {
	 $valid = 1; break;
      }
   }
   if ( $valid == 0 ) return;

   string $attr[];
   string $globs[] = `ls -type mentalrayGlobals`;
   if ( size($globs) == 0 ) return;
   $globs = `listConnections -d on ($globs[0] + ".options")`;
   if ( size($globs) == 0 ) return;

   int $active = `getAttr ($globs[0] + ".finalGather")`;

   // Add new mrLiquid miFlags if they don't exist in node,
   // but only if render globals is set to render those.
   if ( $active )
   {
      $attr = `listAttr -st miFinalGather $node`;
      if ( size($attr) == 0 )
      {
	 addAttr -ln miFinalGather -sn fng -at enum -min 0 -max 5 -dv 5
	 -en "Hidden:Disabled:Cast only:Receive only:Cast+Receive:Use Inherited" $node;
      }
   }

   int $active = `getAttr ($globs[0] + ".rayTracing")`;
   if ( $active )
   {
      $attr = `listAttr -st miReflection $node`;
      if ( size($attr) == 0 )
      {
	 addAttr -ln miReflection -sn rfl  -at enum -min 0 -max 5 -dv 5
	 -en "Hidden:Disabled:Cast only:Receive only:Cast+Receive:Use Inherited" $node;
      }
      $attr = `listAttr -st miRefraction $node`;
      if ( size($attr) == 0 )
      {
	 addAttr -ln miRefraction -sn rfr  -at enum -min 0 -max 5 -dv 5
	 -en "Hidden:Disabled:Cast only:Receive only:Cast+Receive:Use Inherited" $node;
      }
   }

}

global proc AEmrInstanceFlagsFlagsActivate(string $node)
{
   mrl_add_instance_flags( $node );


   int $dfm = `getAttr ($node + ".miDeriveFromMaya")`;
   editorTemplate -dimControl $node "miHide" $dfm;
   editorTemplate -dimControl $node "miVisible" $dfm;
   editorTemplate -dimControl $node "miTrace" $dfm;
   editorTemplate -dimControl $node "miShadow" $dfm;
   editorTemplate -dimControl $node "miCaustic" $dfm;
   editorTemplate -dimControl $node "miGlobillum" $dfm;
   editorTemplate -dimControl $node "miReflection" $dfm;
   editorTemplate -dimControl $node "miRefraction" $dfm;
   editorTemplate -dimControl $node "miFinalGather" $dfm;
}

// ===========================================================================

global proc AEmrInstanceFlagsGeometryActivate(string $node)
{
	if( `attrNavigationControlGrp -ex geometryShaderCtrl`)
	{
		int $gs = `getAttr ($node + ".miExportGeoShader")`;
		attrNavigationControlGrp -edit -enable $gs
			geometryShaderCtrl;
	}
}

global proc AEmrInstanceFlagsGeometryNew(string $messagePlug)
{
	setUITemplate -pushTemplate attributeEditorTemplate;
	attrNavigationControlGrp -label "Geometry Shader" geometryShaderCtrl;
	setUITemplate -popTemplate;
	
	AEmrInstanceFlagsGeometryReplace($messagePlug);
}

global proc AEmrInstanceFlagsGeometryReplace(string $messagePlug)
{
	string $node;
	string $buffer[];
	tokenize($messagePlug, ".", $buffer);
	$node = (size($buffer) > 0) ? $buffer[0] : "";

	string $attr = $node + ".miGeoShader";
	string $createNewCmd = "mrCreateRenderNodeWindow (\"" + $attr + "\")";
	
	attrNavigationControlGrp
			-edit -attribute ($node + ".miGeoShader") 
			-createNew $createNewCmd
			geometryShaderCtrl;

	AEmrInstanceFlagsGeometryActivate($node);
}

// ===========================================================================

global proc AEmentalrayInstanceFlags(string $node)
{

   editorTemplate -beginLayout "mental ray" -collapse true;

   editorTemplate -beginLayout "Flags" -collapse false;
   editorTemplate -beginNoOptimize;

   editorTemplate
   -label "Derive From Maya"
   -addControl "miDeriveFromMaya"
   "AEmrInstanceFlagsFlagsActivate";
   editorTemplate
   -label "Hide"
   -addControl "miHide";
   editorTemplate -label "Visible" -addControl "miVisible";
   editorTemplate -label "Trace" -addControl "miTrace";
   editorTemplate -label "Reflection" -addControl "miReflection";
   editorTemplate -label "Refraction" -addControl "miRefraction";
   editorTemplate -label "Shadow" -addControl "miShadow";
   editorTemplate -label "Caustic" -addControl "miCaustic";
   editorTemplate -label "Final Gather" -addControl "miFinalGather";
   editorTemplate -label "Globillum" -addControl "miGlobillum";

   editorTemplate -endNoOptimize;
   editorTemplate -endLayout;

   editorTemplate -beginLayout "Geometry Shader" -collapse false;
   editorTemplate
   -label "Enable Geometry Shader"
   -addControl
   "miExportGeoShader"
   "AEmrInstanceFlagsGeometryActivate";
   editorTemplate -callCustom 
   "AEmrInstanceFlagsGeometryNew"
   "AEmrInstanceFlagsGeometryReplace"
   "message";
   editorTemplate -suppress "miGeoShader";
   editorTemplate -endLayout;

   editorTemplate -suppress mentalRayControls;
   editorTemplate -endLayout;

}
