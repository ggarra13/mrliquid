// Copyright (C) 1997-2004 Alias Systems Corp.
// 
// The information in this file is provided for the exclusive use of the
// licensees of Alias.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias license agreement, without fee.
// 
// ALIAS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

proc	mrl_add_areaobject( string $node )
{
   string $attr[];
   $attr = `listAttr -st miAreaObject $node`;
   if ( size($attr) == 0 )
   {
	 addAttr -ln miAreaObject -sn mao -at message $node;
   }
}

//****************************************************************************
// Define additional light attributes for mental ray. They will show up in
// the attribute editor of maya lights.
//****************************************************************************

global proc AEmiPointAreaLightReplace(string $typ, string $org, string $cor)
{
	warning("Calling an obsolete mel procedure AEmiPointAreaLightReplace.");
}

global proc AEmiPointAreaLightNew(string $typ, string $org, string $cor)
{
	warning("Calling an obsolete mel procedure AEmiPointAreaLightNew.");
}

global proc miPointLightExportFlagsNew(string $messagePlug)
{
	attrNavigationControlGrp
		-label "Light Shader" pointLightShaderCtrl;
	attrNavigationControlGrp
		-label "Photon Emitter" photonEmitterCtrl;

	popupMenu -p pointLightShaderCtrl pointLightPop1_ya;
	popupMenu -p photonEmitterCtrl pointLightPop2_ya;

	miPointLightExportFlagsReplace($messagePlug);
}

global proc miPointLightExportFlagsReplace(string $messagePlug)
{
	string $node;
	string $buffer[];
	tokenize($messagePlug, ".", $buffer);
	$node = (size($buffer) > 0) ? $buffer[0] : "";

	attrNavigationControlGrp
		-edit -attribute ($node + ".miLightShader" )
		pointLightShaderCtrl;
	attrNavigationControlGrp
		-edit -attribute ($node + ".miPhotonEmitter" )
		photonEmitterCtrl;
		
	popupMenu -e -pmc ("popupItems " + $node + ".miLightShader pointLightPop1_ya") pointLightPop1_ya;
	popupMenu -e -pmc ("popupItems " + $node + ".miPhotonEmitter pointLightPop2_ya") pointLightPop2_ya;
}

global proc miPointLightCheckEmitPhotons(string $node)
{
	int	$noCaustic = `miIsCaustic` ? false : true;
	int	$noGlobIll = `miIsGlobalIllum` ? false : true;
	int	$phot = `getAttr ($node + ".emitPhotons")`;
	int	$dim  = $phot ? false : true;

	editorTemplate -dc $node "photonIntensity" $dim;
	editorTemplate -dc $node "exponent" $dim;
	editorTemplate -dc $node "causticPhotons" ($dim || $noCaustic);
	editorTemplate -dc $node "globIllPhotons" ($dim || $noGlobIll);
	
	if( `colorSliderGrp -query -exists pointLightPhotonColorCtrl`)
	{
		colorSliderGrp
			-edit 
			-enable (`getAttr ($node + ".emitPhotons")`)
			pointLightPhotonColorCtrl;
	}
}

global proc miPointLightShadowMapFromMaya(string $node)
{
	int $resolution = `getAttr ( $node + ".dmapResolution")`;
	setAttr ( $node + ".smapResolution" ) $resolution;

	int $filterSize = `getAttr ( $node + ".dmapFilterSize")`;
	if ($filterSize > 0) {
		setAttr ( $node + ".smapSoftness" ) ($filterSize/40.0);
		if ($filterSize == 1)
			setAttr ( $node + ".smapSamples" ) 1;
		else
			setAttr ( $node + ".smapSamples" ) (10*$filterSize);
		}
	else {
		setAttr ( $node + ".smapSoftness" ) 0;
		setAttr ( $node + ".smapSamples" ) 0;
		}

	setAttr -type "string" ( $node + ".smapFilename" ) "";
}

global proc miPointLightShadowMapButtonCreate(string $messagePlug)
{
	string $node;
	string $buffer[];
	tokenize($messagePlug, ".", $buffer);
	$node = (size($buffer) > 0) ? $buffer[0] : "";

	separator
		-style "none" -width 490 -height 10;
	rowLayout
		-numberOfColumns 2
		-columnWidth 2 180;

		text	-label "";
		button	-label "Take Settings From Maya"
			-command ( "miPointLightShadowMapFromMaya " + $node )
			settingsButton;
	setParent ..;

	separator
		-style "none" -width 490 -height 10;
}

global proc miPointLightShadowMapButtonReplace(string $messagePlug)
{
	string $node;
	string $buffer[];
	tokenize($messagePlug, ".", $buffer);
	$node = (size($buffer) > 0) ? $buffer[0] : "";

	button	-edit
		-command ( "miPointLightShadowMapFromMaya " + $node )
		settingsButton;
}

global proc miPointLightCheckShadowMap(string $node)
{
	int	$smap = `getAttr ($node + ".shadowMap")`;
	int	$dim  = $smap ? false : true;

	editorTemplate -dc $node "smapResolution" $dim;
	editorTemplate -dc $node "smapSamples" $dim;
	editorTemplate -dc $node "smapSoftness" $dim;
	editorTemplate -dc $node "smapBias" $dim;
	if( `rowLayout -query -exists fileNameSLLayout` )
	{
		rowLayout -edit -enable (!$dim) fileNamePLLayout;
	}
	if( `button -query -exists settingsButton` )
	{
			button -edit -enable (!$dim) settingsButton;
	}
	
	editorTemplate -dc $node "smapSceneName" $dim;
	editorTemplate -dc $node "smapLightName" $dim;
	editorTemplate -dc $node "smapFrameExt" $dim;
	
	editorTemplate -dc $node "smapDetail" $dim;
	
	miPointLightCheckDetailShadowMap($node);
}

global proc miPointLightCheckDetailShadowMap(string $node)
{
	int	$smap = `getAttr ($node + ".smapDetail")`;
	int	$dim  = $smap ? false : true;
					
	editorTemplate -dc $node "smapDetailSamples" $dim;
	editorTemplate -dc $node "smapDetailAccuracy" $dim;
	editorTemplate -dc $node "smapDetailAlpha" $dim;
	
	if( `attrNavigationControlGrp -query -exists pointLightCameraCtrl`)
	attrNavigationControlGrp -edit -enable $smap
			pointLightCameraCtrl;

}

proc miPointLightDisplayAreaLocator(string $node, int $type)
{

        if( ! mentalIsLoaded() ) return;

	int $undoOn = `undoInfo -query -swf`;
	if ($undoOn)
		undoInfo -swf off;

	string $typeNames[4] = {
		"rectangularLightLocator",
		"discLightLocator",
		"sphericalLightLocator",
		"cylindricalLightLocator"
		};

	int $reSelect = false;
	string $selection[] = `ls -selection`;

	// Get all instance parents of the light shape node.
	string $parents[] = `listRelatives -fullPath -allParents $node`;

	// Loop over parents.
	for ($parent in $parents) {
		int $createLocator = ($type >= 0 && $type < 4);

		// Remove previously attached locators.
		for ($cnt=0; $cnt<size($typeNames); $cnt++) {
			string $typeName = $typeNames[$cnt];
			// Get all locators of a given type.
			string $locators[] =
				`listRelatives -c -type $typeName $parent`;
			// If there is exactly one locator of the type we  wish
			// to create then that locator is kept and a new one is
			// not created.
			if ($cnt == $type && size($locators) == 1) {
				$createLocator = false;
				continue;
				}
			// Remove old locators.
			if (size($locators) > 0)
				delete $locators;
			}

		// Create a locator if desired.
		if ($createLocator) {
			// bug 202143
			// $parent contains the full dag path with '|' in the name.
			// substitue '|' with '_' to prevent warning msg.
			string $tmpParent = `substitute "|" $parent "_"`;
			shadingNode
				-asUtility -name ($tmpParent + "_mrLoc")
				-parent $parent $typeNames[$type];
			$reSelect = true;
			}
		}

	if ($reSelect)
		// Undo selection.
		select $selection;

	if ($undoOn)
		undoInfo -swf on;
}

global proc miPointLightChangeAreaLight(string $node)
{
  int $pluginLoaded = mentalIsLoaded();

	editorTemplate -dc $node "areaLight" (! $pluginLoaded);

	int	$algt = `getAttr ($node + ".areaLight")`;

	miPointLightDisplayAreaLocator(
		$node, ($algt) ? `getAttr ($node + ".areaType")` : -1);

	miPointLightCheckAreaLight($node);
}

global proc miPointLightCheckAreaLight(string $node)
{
        int $pluginLoaded = mentalIsLoaded();

	int	$algt = `getAttr ($node + ".areaLight")`;
	int	$dim  = ($pluginLoaded && $algt) ? false : true;

	if (`control -q -exists areacl`)
		columnLayout -e -en $algt areacl;

	editorTemplate -dc $node "areaType" $dim;
	editorTemplate -dc $node "areaSampling" $dim;
	editorTemplate -dc $node "areaLowLevel" $dim;
	editorTemplate -dc $node "areaLowSampling" $dim;
	editorTemplate -dc $node "areaVisible" $dim;
	editorTemplate -dc $node "miAreaObject" $dim;
}

global proc miPointLightCheckAreaType(string $node)
{
        mrl_add_areaobject( $node );

	int	$atyp = `getAttr ($node + ".areaType")`;
	if( `getAttr ($node + ".areaLight")` == 0 )
		return;

	switch ($atyp) {
		case 0:	// rectangle
			setAttr ($node + ".areaNormalX") 0.0;
			setAttr ($node + ".areaNormalY") 2.0;
			setAttr ($node + ".areaNormalZ") 0.0;
			setAttr ($node + ".areaEdgeX") 2.0;
			setAttr ($node + ".areaEdgeY") 0.0;
			setAttr ($node + ".areaEdgeZ") 0.0;
			break;
		case 1:	// disc
			setAttr ($node + ".areaNormalX") 0.0;
			setAttr ($node + ".areaNormalY") 0.0;
			setAttr ($node + ".areaNormalZ") -1.0;
			setAttr ($node + ".areaRadius") 1.0;
			break;
		case 2:	// sphere
			setAttr ($node + ".areaRadius") 1.0;
			break;
		case 3:	// cylinder
			setAttr ($node + ".areaEdgeX") 1.0;
			setAttr ($node + ".areaEdgeY") 0.0;
			setAttr ($node + ".areaEdgeZ") 0.0;
			setAttr ($node + ".areaRadius") 1.0;
			break;
		default:
			setAttr ($node + ".areaNormalX") 0.0;
			setAttr ($node + ".areaNormalY") 0.0;
			setAttr ($node + ".areaNormalZ") 0.0;
			setAttr ($node + ".areaEdgeX") 0.0;
			setAttr ($node + ".areaEdgeY") 0.0;
			setAttr ($node + ".areaEdgeZ") 0.0;
			setAttr ($node + ".areaRadius") 0.0;
		}

	int $dim = ($atyp >= 4) ? false : true;
	editorTemplate -dc $node "miAreaObject" $dim;

	miPointLightDisplayAreaLocator($node, $atyp);
}

global proc AEmiPLShadowMapFilenameNew(string $attr)
{
	setUITemplate -pushTemplate attributeEditorTemplate;
	rowLayout -numberOfColumns 2 fileNamePLLayout;
		text -label "Shadow Map File Name";
		textField smapPLFilenameTextField;
	setParent ..;
	setUITemplate -popTemplate;

	AEmiPLShadowMapFilenameReplace $attr;

}

global proc AEmiPLShadowMapFilenameReplace(string $attr)
{
	connectControl smapPLFilenameTextField $attr;
}

global proc miPointLightPhotonColorNew(string $attr)
{
	colorSliderGrp
		-label "Photon Color" 
		pointLightPhotonColorCtrl;
	miPointLightPhotonColorReplace($attr);	
}

global proc miPointLightPhotonColorReplace(string $attr)
{
	string $node;
	string $buffer[];
	tokenize($attr, ".", $buffer);
	$node = (size($buffer) > 0) ? $buffer[0] : "";
	
	// compute the photon color
	float $rgb[] = `getAttr ($node + ".energy")`;
	
	float $intensity = `getAttr ($node + ".photonIntensity")`;
	$rgb[0] /= $intensity;
	$rgb[1] /= $intensity;
	$rgb[2] /= $intensity;
	
	float $maxColor = max($rgb[0], $rgb[1]);
	$maxColor = max($maxColor, $rgb[2]);
	
	// normalize the color.
	if( $maxColor > 1 )
	{
		$rgb[0] /= $maxColor;
		$rgb[1] /= $maxColor;
		$rgb[2] /= $maxColor;
		$intensity *= $maxColor;
		setAttr ($node + ".photonIntensity") $intensity;
	} else if( $maxColor < 0.1 )
	{
		// is rgb to small? - scale up to 0.1
		$maxColor /= 0.1;
		$rgb[0] = $rgb[0]/$maxColor;
		$rgb[1] = $rgb[1]/$maxColor;
		$rgb[2] = $rgb[2]/$maxColor;
		
		$intensity *= $maxColor;
		setAttr ($node + ".photonIntensity") $intensity;
	}
	
	colorSliderGrp
		-edit 
		-enable (`getAttr ($node + ".emitPhotons")`)
		-rgbValue $rgb[0] $rgb[1] $rgb[2]
		-changeCommand ("miPointLightUpdatePhotonEnergy (\"" + $node + "\")")
		pointLightPhotonColorCtrl;
		
	miPointLightUpdatePhotonEnergy($node);
}

global proc miPointLightUpdatePhotonEnergy(string $node)
{
	if( !`colorSliderGrp -query -exists pointLightPhotonColorCtrl` ||
 	    !`getAttr -se ($node + ".energy")`)
		return;
	float $rgbcolor[] = `colorSliderGrp -query -rgbValue pointLightPhotonColorCtrl`;
	
	float $energy[] = $rgbcolor;
	float $intensity = `getAttr ($node + ".photonIntensity")`;
	$energy[0] *= $intensity;
	$energy[1] *= $intensity;
	$energy[2] *= $intensity;
	
	setAttr ($node + ".energy") -type float3 $energy[0] $energy[1] $energy[2];
}


//
// Create general mental ray controls
// with map button hidden.
//
global proc AEmiPointLightControlNew(string $attr, string $label)
{
	string $node;
	string $buffer[];
	tokenize($attr, ".", $buffer);
	$node = (size($buffer) > 0) ? $buffer[0] : "";
	
	// compose the control name
	string $controlName = "mentalrayPointLight" ;
	if(size($buffer) > 1) $controlName += $buffer[1];
	$controlName += "Ctrl";
	
	// extract control label
	clear($buffer);
	tokenize($label, ".", $buffer);
	string $finalLabel = (size($buffer) > 1) ? $buffer[1] : "";
	
	attrControlGrp -attribute $attr
		-label $finalLabel
		-hideMapButton true  
		$controlName;
	
	AEmiPointLightControlReplace($attr, $label);
}

global proc AEmiPointLightControlReplace(string $attr, string $label)
{
	string $node;
	string $buffer[];
	tokenize($attr, ".", $buffer);
	$node = (size($buffer) > 0) ? $buffer[0] : "";
	
	// compose the control name
	string $controlName = "mentalrayPointLight" ;
	if(size($buffer) > 1) $controlName += $buffer[1];
	$controlName += "Ctrl";
	
	attrControlGrp -edit -attribute $attr $controlName;
}

global proc AEmentalrayPointLight(string $node)
{	

	// A|w: non-collapse display required to ensure proper update
	editorTemplate -bl "mental ray" -cl true;

		editorTemplate -bl "Caustic and Global Illumination" -cl false;
			editorTemplate -ac "emitPhotons"
						"miPointLightCheckEmitPhotons";
		editorTemplate -callCustom
					"miPointLightPhotonColorNew"
					"miPointLightPhotonColorReplace"
					"energy";
		editorTemplate -ac "photonIntensity" miPointLightUpdatePhotonEnergy;
			editorTemplate -ac "exponent";					
			editorTemplate -as;
			editorTemplate -ac "causticPhotons" ;
		editorTemplate -l "Global Illum Photons"
				-ac "globIllPhotons";
		editorTemplate -el;

		editorTemplate -beginLayout "Shadow Map Attributes" -cl false;
		
			editorTemplate -ac "shadowMap"
				"miPointLightCheckShadowMap";
			editorTemplate -callCustom
				"miPointLightShadowMapButtonCreate"
				"miPointLightShadowMapButtonReplace"
					"message";
					
			editorTemplate -label "Resolution" -ac "smapResolution";
			editorTemplate -label "Samples" -ac "smapSamples" ;
			editorTemplate -label "Softness" -ac "smapSoftness" ;
			editorTemplate -label "Bias" -ac "smapBias" ;
									
			// custom control to ensure proper label update
			editorTemplate -callCustom
					"AEmiPLShadowMapFilenameNew"
					"AEmiPLShadowMapFilenameReplace"
						"smapFilename";
			editorTemplate -l "Add Light Name" -ac smapLightName ;
			editorTemplate -l "Add Scene Name" -ac smapSceneName ;
			editorTemplate -l "Add Frame Ext"  -ac smapFrameExt ;
	
		
			editorTemplate -beginLayout "Detail Shadow Map Attributes" -cl false;
				editorTemplate -l "Detail Shadow Map" -ac "smapDetail"
						"miPointLightCheckDetailShadowMap";
				
				editorTemplate -label "Samples" -ac "smapDetailSamples";
				editorTemplate -label "Accuracy"-ac "smapDetailAccuracy";
				editorTemplate -label "Alpha" -ac "smapDetailAlpha";
			
			editorTemplate -endLayout;
		editorTemplate -el;

	editorTemplate -bl "Area Light" -cl false;
		editorTemplate -ac "areaLight"
			"miPointLightChangeAreaLight";

		editorTemplate -l "Type" -ac "areaType" "miPointLightCheckAreaType";
		editorTemplate -l "Area Object" -ac "miAreaObject";

		editorTemplate -l "Sampling"     -ac "areaSampling";
		editorTemplate -l "Low Level"    -ac "areaLowLevel";
		editorTemplate -l "Low Sampling" -ac "areaLowSampling";
		editorTemplate -l "Visible"      -ac "areaVisible";
	editorTemplate -el;

	editorTemplate -s "areaNormal";
	editorTemplate -s "areaEdge";
	editorTemplate -s "areaRadius";

	editorTemplate -bl "Custom Shaders" -cl false;
	editorTemplate -l "Suppress all Maya shaders"
		-ac "miExportMrLight";
	editorTemplate -callCustom
		"miPointLightExportFlagsNew"
		"miPointLightExportFlagsReplace" "message";
	editorTemplate -s "miLightShader";
	editorTemplate -s "miPhotonEmitter";
	editorTemplate -s "smapFilename";
	editorTemplate -s "energy";
	editorTemplate -el;
	
	editorTemplate -beginLayout "Light Profile" -collapse 0 ;
		editorTemplate -callCustom "mentalrayLightProfileNodeCreateUI" "mentalrayLightProfileNodeReplaceUI" "miLightProfile" "Light Profile";
	editorTemplate -endLayout;	

	editorTemplate -s "miLightProfile";
	
	// This attr does not exist any more, 
	// but pre-6.0 scenes creates it as a dynamic attr,
	// so it has to be suppressed explicitly.
	// Fortunatley, doing this in new 6.0 scene does not cause error
	// even though the attr does not exist on the node.
	editorTemplate -s "physical";
	
	editorTemplate -el;

}
